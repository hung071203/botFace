// help.js
const levenshtein = require('fast-levenshtein');
module.exports.config = {
    name: 'help',
    version: '1.0.0',
    credit: 'YourName',
    description: 'Hi·ªÉn th·ªã danh s√°ch l·ªánh v√† c√°ch s·ª≠ d·ª•ng',
    usage: '!help'
  };
  
module.exports.run = async function (api, event, args, client) {
  if(args.length == 2){
    let listCommands = []
    client.commands.forEach((value, key) => {
      listCommands.push(key);
    });
    let command = args[1].toLowerCase();
    if (!listCommands.includes(command)) {
        let find = findClosestCommand(command, listCommands);
        return api.sendMessage (`‚õîL·ªánh b·∫°n nh·∫≠p kh√¥ng t·ªìn t·∫°i!\n‚ôüÔ∏èL·ªánh g·∫ßn gi·ªëng nh·∫•t l√†: ${find}`, event.threadID, event.messageID);
    }
    return api.sendMessage (`üëâT√™n l·ªánh: ${client.commands.get(command).config.name}\n‚ôüÔ∏èPhi√™n b·∫£n l·ªánh: ${client.commands.get(command).config.version}\nüë§T√°c gi·∫£: ${client.commands.get(command).config.credit}\nüìúCh√∫ th√≠ch: ${client.commands.get(command).config.description}\nüìùC√°ch s·ª≠ d·ª•ng: ${client.commands.get(command).config.usage}`, event.threadID, event.messageID);
  }
  
  const commandInfoByTag = {};
  const tagCommands = {};
  let i = 0;
  // L·∫∑p qua danh s√°ch l·ªánh
  client.commands.forEach((cmd) => {
    // Ki·ªÉm tra xem l·ªánh c√≥ th√¥ng tin c·∫•u h√¨nh kh√¥ng
    if (cmd.config) {
      const { name, description, tag, usage } = cmd.config;

      // N·∫øu tag kh√¥ng t·ªìn t·∫°i, ƒë·∫∑t gi√° tr·ªã l√† "OTHER"
      const currentTag = tag ? tag.toUpperCase() : 'OTHER';
      // T·∫°o key t·ª´ tag n·∫øu ch∆∞a t·ªìn t·∫°i
      if (!commandInfoByTag[currentTag]) {
        commandInfoByTag[currentTag] = [];
        tagCommands[currentTag] = [];
      }

      // Th√™m th√¥ng tin c·ªßa l·ªánh v√†o danh s√°ch c·ªßa tag t∆∞∆°ng ·ª©ng
      commandInfoByTag[currentTag].push(`${name}: ${description} - S·ª≠ d·ª•ng: ${usage}\n`);
      tagCommands[currentTag].push(name)
      i++
    }
  });

  // T·∫°o m·ªôt m·∫£ng ch·ª©a th√¥ng tin nh√≥m l·∫°i
  const groupedCommandInfo = [];
  const details = []
  // L·∫∑p qua t·ª´ng tag v√† t·∫°o th√¥ng tin nh√≥m l·∫°i
  Object.keys(commandInfoByTag).forEach((tag, index) => {
    const tagCommandInfo = commandInfoByTag[tag];
    const tagCommand = tagCommands[tag];
    details.push(tagCommandInfo)
    const tagInfo = `-----------------------------------------------------------------------\n|${index + 1}. ${tag} c√≥ ${tagCommandInfo.length} l·ªánh:|\n-----------------------------------------------------------------------\n${tagCommand.join(', ')}`;
    groupedCommandInfo.push(tagInfo);
    
  });
  groupedCommandInfo.push(`----------------------------------------------------------------------\n T·ªïng c√≥ ${i} l·ªánh c√≥ th·ªÉ ho·∫°t ƒë·ªông!\nRep tin nh·∫Øn k√®m s·ªë th·ª© t·ª± ƒë·ªÉ hi·ªán chi ti·∫øt l·ªánh!`);
  // G·ª≠i th√¥ng ƒëi·ªáp ch·ª©a th√¥ng tin v·ªÅ c√°c l·ªánh ƒë√£ nh√≥m l·∫°i theo tag
  api.sendMessage(groupedCommandInfo.join('\n\n'), event.threadID, (error, info) => {
    if (error) {
        console.log(error);
    } else {
        client.handleReply.push({
            name: this.config.name,
            messageID: info.messageID,
            author: event.senderID,
            details: details
        })
        
    }
}, event.messageID);
};
  
module.exports.handleReply = async function (api, event, client, hdr) {
  if(event.type != 'message_reply') return
  if(!event.messageReply) return
  if(hdr.messageID != event.messageReply.messageID) return
  if(isNaN(event.body)) return api.sendMessage(`Ph·∫£i nh·∫≠p v√†o 1 s·ªë!`, event.threadID, event.messageID)
  let index = parseInt(event.body) - 1
  if(index < 0 || index >= hdr.details.length) return api.sendMessage(`s·ªë nh·∫≠p v√†o kh√¥ng h·ª£p l·ªá`, event.threadID, event.messageID)
  let detail = hdr.details[index]
  api.sendMessage(detail.join('\n'), event.threadID, (err, data) =>{
    if(err) console.log(err)
    api.unsendMessage(hdr.messageID);
    client.handleReply = client.handleReply.filter(item =>item.messageID != event.messageReply.messageID);
  }, event.messageID)
}
function findClosestCommand(input, commands) {
    let closestCommand = null;
    let closestDistance = Infinity;

    commands.forEach(command => {
        const distance = levenshtein.get(input, command);
        if (distance < closestDistance) {
            closestDistance = distance;
            closestCommand = command;
        }
    });

    return closestCommand;
}