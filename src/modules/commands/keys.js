module.exports.config = {
    name: 'key',
    version: '1.0.0',
    credit: 'YourName',
    description: ' Gia h·∫°n th·ªùi gian d√πng bot b·∫±ng key',
    tag: 'ADMIN',
    usage: `${process.env.PREFIX}key [m(th·ªß c√¥ng) (t√™n key) / a(t·ª± ƒë·ªông) / s(show)] [th·ªùi gian(ng√†y)]\n(mu·ªën d√πng key ch·ªâ c·∫ßn nh·∫≠p v√†o ƒëo·∫°n chat)`
};

const keys = []

module.exports.run = async function (api, event, args, client) {
    
    let check = client.ADMIN.find(item => item == event.senderID)
    if(!check) return api.sendMessage('B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng ch·ª©c nƒÉng n√†y!', event.threadID, event.messageID)
    let time = 0
    let name = ''
    switch (args[1]) {
        case 'm':
            if(isNaN(args[3])) return api.sendMessage('c√∫ ph√°p kh√¥ng h·ª£p l·ªá, th·ªùi gian c·∫ßn l√† 1 s·ªë. V√≠ d·ª•: 10!', event.threadID, event.messageID)
            keys.push({
                name: args[2],
                time: parseInt(args[3]),
                isUse: false
            })
            time = parseInt(args[3])
            name = args[2]
            break;

        case 'a':
            const randomKey = generateRandomKey(10);
            if(isNaN(args[2])) return api.sendMessage('c√∫ ph√°p kh√¥ng h·ª£p l·ªá, th·ªùi gian c·∫ßn l√† 1 s·ªë. V√≠ d·ª•: 10!', event.threadID, event.messageID)
            keys.push({
                name: randomKey,
                time: parseInt(args[2]),
                isUse: false
            })
            time = parseInt(args[2])
            name = randomKey
            break;

        case 's':
            let msgs = 'üìúDanh s√°ch nh√≥m ƒë√£ d√πng key: \n'
            let count = 1
            client.QTVOL.forEach(item => {
                if(item.key == '') return
                var date = new Date(item.time);
        
                var localeDate = date.toLocaleString('vi-VN', {timeZone: 'Asia/Ho_Chi_Minh'});
                msgs += `${count}. üîëT√™n key: ${item.key} \nüë§Ng∆∞·ªùi gia h·∫°n: ${item.userName} \nüïõH·∫°n s·ª≠ d·ª•ng: ${localeDate}\n\n`
                count++
            })
            return api.sendMessage(msgs, event.threadID, event.messageID)
            break; 
    
        default:
            return api.sendMessage('c√∫ ph√°p kh√¥ng h·ª£p l·ªá!', event.threadID, event.messageID)
            
    }

    const currentDate = new Date(); // L·∫•y ng√†y hi·ªán t·∫°i

    // T√≠nh to√°n ng√†y sau khi th√™m s·ªë ng√†y v√†o ng√†y hi·ªán t·∫°i
    const futureDate = new Date(currentDate.getTime() + time * 24 * 60 * 60 * 1000);

    // ƒê·ªãnh d·∫°ng ng√†y th√†nh chu·ªói d·∫°ng ng√†y/th√°ng/nƒÉm theo m√∫i gi·ªù Vi·ªát Nam
    const options = { weekday: 'short', year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric', timeZone: 'Asia/Ho_Chi_Minh' };
    const formattedDate = futureDate.toLocaleDateString('vi-VN', options);
    api.sendMessage(`üîëƒêaÃÉ theÃÇm key: ${name}\nüìúH·∫°n ƒë·∫øn: ${formattedDate}\nüïõKey s·∫Ω t·ª± h·∫øt h·∫°n sau 10 ph√∫t! `, event.threadID, event.messageID)
    setTimeout(() => {
        let find = keys.find(item => item.name == name)
        if(find) keys.splice(keys.indexOf(find), 1)
        api.sendMessage(`üîëKey ${name} ƒë√£ b·ªã thu h·ªìi v√¨ h·∫øt h·∫°n!`, event.threadID, event.messageID)
    }, 10 * 60 * 1000);
}

module.exports.handleEvent = async function (api, event, client) {
    if(!event.body) return
    let find = keys.find(item => item.name == event.body)
    if(!find) return
    let checkBox = client.QTVOL.find(item => item.threadID == event.threadID)
    if(!checkBox) return
    const currentDate = new Date()
    if(currentDate.getTime() < checkBox.time - 3 * 24 * 60 * 60 * 1000 ) return api.sendMessage(`Nh√≥m v·∫´n c√≤n tr√™n 3 ng√†y d√πng bot, kh√¥ng th·ªÉ gia h·∫°n!`, event.threadID, event.messageID)
    if(find.isUse) return api.sendMessage(`üîëKey ${event.body} ƒëaÃÉ ƒëuÃõoÃõÃ£c suÃõÃâ duÃ£ng`, event.threadID, event.messageID)
    find.isUse = true
    // T√≠nh to√°n ng√†y sau khi th√™m s·ªë ng√†y v√†o ng√†y hi·ªán t·∫°i
    const futureDate = new Date(currentDate.getTime() + find.time * 24 * 60 * 60 * 1000);

    // ƒê·ªãnh d·∫°ng ng√†y th√†nh chu·ªói d·∫°ng ng√†y/th√°ng/nƒÉm theo m√∫i gi·ªù Vi·ªát Nam
    const options = { weekday: 'short', year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric', timeZone: 'Asia/Ho_Chi_Minh' };
    const formattedDate = futureDate.toLocaleDateString('vi-VN', options);
    let msgs = `üîëKey ${event.body} s·ª≠ d·ª•ng th√†nh c√¥ng!\n`
    msgs += `üìúNh√≥m ƒë∆∞·ª£c gia h·∫°n ƒë·∫øn: ${formattedDate}\n`
    let user = client.members.find(item => item.userID == event.senderID)
    console.log(client.members);
    let userName = user ? user.name : "Kh√¥ng x√°c ƒë·ªãnh";
    msgs += `üë§Ng∆∞·ªùi d√πng: ${userName}`
    checkBox.time = currentDate.getTime() + find.time * 24 * 60 * 60 * 1000
    checkBox.userName = userName
    checkBox.key = event.body
    api.sendMessage(msgs, event.threadID, event.messageID)
}

function generateRandomKey(length) {
    let result = '';
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const charactersLength = characters.length;
    
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    
    return result;
}